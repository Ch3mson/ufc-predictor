import pandas as pd
import numpy as np
import joblib

# Path configurations
MODEL_PATH = './models/rf_model.joblib'
DATA_PATH = './raw_total_fight_data.csv'

# Load the serialized Random Forest model
loaded_rf_classifier = joblib.load(MODEL_PATH)
print("Model successfully loaded.")

# Load the dataframe containing fighter attributes
avg_attributes_df = pd.read_csv(DATA_PATH)
print("Dataframe successfully loaded.")

def get_fighter_row(dataframe, fighter_name):
    """
    Extracts the attribute row for a given fighter.
    
    Parameters:
        dataframe (pd.DataFrame): The dataframe containing fighter attributes.
        fighter_name (str): The name of the fighter.
        
    Returns:
        np.array: The feature array for the fighter.
    """
    row = dataframe.loc[dataframe['fighter'].str.lower() == fighter_name.lower()]
    if row.empty:
        raise ValueError(f"Fighter '{fighter_name}' not found in the dataframe.")
    row_values = row.values.flatten()[1:]  # Exclude the 'fighter' column
    return row_values

def get_win_probability(fighter_name):
    """
    Predicts the win probability for a single fighter.
    
    Parameters:
        fighter_name (str): The name of the fighter.
        
    Returns:
        float: The probability of the fighter winning.
    """
    fighter_row = get_fighter_row(avg_attributes_df, fighter_name)
    win_prob = loaded_rf_classifier.predict_proba([fighter_row])[0][1]  # Assuming class 1 is 'win'
    return win_prob

def match_probability(fighter_A, fighter_B):
    """
    Calculates the win probabilities for two fighters in a match.
    
    Parameters:
        fighter_A (str): Name of Fighter A.
        fighter_B (str): Name of Fighter B.
        
    Returns:
        tuple: (Probability Fighter A wins, Probability Fighter B wins)
    """
    prob_A = get_win_probability(fighter_A)
    prob_B = get_win_probability(fighter_B)
    total_prob = prob_A + prob_B
    probability_A = round(prob_A / total_prob, 2)
    probability_B = round(prob_B / total_prob, 2)
    return probability_A, probability_B

if __name__ == "__main__":
    # Example usage
    fighter1 = 'Conor McGregor'
    fighter2 = "Sean O'Malley"
    
    try:
        prob_A, prob_B = match_probability(fighter1, fighter2)
        print(f"Probability {fighter1} wins: {prob_A * 100}%")
        print(f"Probability {fighter2} wins: {prob_B * 100}%")
    except ValueError as e:
        print(e)
:wq!
;q
